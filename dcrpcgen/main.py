"""Main entry point"""

import argparse
import json
import subprocess
from pathlib import Path
from typing import Callable

from ._version import __version__
from .java import java_cmd


def add(
    subparsers: argparse._SubParsersAction,
    base: argparse.ArgumentParser,
    func: Callable,
) -> argparse.ArgumentParser:
    """Add function as CLI subcommand"""
    name = func.__name__
    assert name.endswith("_cmd")
    name = name[:-4]
    assert func.__doc__
    doc = (func.__doc__).strip()
    p = subparsers.add_parser(name, description=doc, help=doc, parents=[base])
    p.set_defaults(func=func)
    return p


def get_schema(filename: str) -> dict:
    """Load Delta Chat JSON-RPC schema from file path"""
    if filename:
        with Path(filename).open(encoding="utf-8") as schema_file:
            return json.load(schema_file)
    return {}


def get_parser() -> argparse.ArgumentParser:
    """Create CLI argument parser"""
    base = argparse.ArgumentParser(add_help=False)
    base.add_argument(
        "-o",
        "--output",
        help="output folder (default: generated)",
        type=Path,
        metavar="FOLDER",
        dest="folder",
        default=argparse.SUPPRESS,
    )
    base.add_argument(
        "--schema",
        help=(
            "OpenRPC schema file as generated by deltachat-rpc-server --openrpc."
            " If not set, deltachat-rpc-server will be called directly"
        ),
        type=get_schema,
        metavar="PATH",
        dest="openrpc_spec",
        default=argparse.SUPPRESS,
    )

    parser = argparse.ArgumentParser(
        description="Delta Chat JSON-RPC client generator", parents=[base]
    )
    parser.add_argument("-v", "--version", action="version", version=__version__)
    subparsers = parser.add_subparsers(title="subcommands")

    for generator in [java_cmd]:
        add(subparsers, base, generator)

    return parser


def main(args=None) -> None:
    """Application entry point"""
    parser = get_parser()
    args = parser.parse_args(args=args)
    if not hasattr(args, "func"):
        parser.parse_args(["-h"])
    if not hasattr(args, "folder"):
        args.folder = Path("generated")

    if not hasattr(args, "openrpc_spec") or not args.openrpc_spec:
        cmd = "deltachat-rpc-server"
        print("WARNING: no schema file provided, trying to generate it using", cmd)
        args.openrpc_spec = json.loads(
            subprocess.run([cmd, "--openrpc"], capture_output=True, check=True).stdout
        )

    args.func(args)
